#!/usr/bin/env node

var path = require('path')
var os = require('os')
var spawn = require('child_process').spawn
var yargs = require('yargs')

var argsBuilder = yargs
    .usage('$0 --config=path1 --config=path2 --certs=path --binded --verbose')
    .alias('c', 'config')
    .alias('v', 'verbose')
    .alias('r', 'certs')
    .alias('b', 'binded')
    .example('$0 --config=app --certs=app/ssl')
//     .example('Where #main#default-server.yaml:\n' +
// 'host: 0.0.0.0\n' +
// 'connections:\n' +
// '    -\n' +
// '        from: https://dev1.example.com\n' +
// '        to: http://localhost:8080\n'
// )
    .boolean('binded')
    .array('config')
    .default('certs', process.cwd)
    .help('h')
    .alias('h', 'help')
    .describe('verbose', 'Verbose output')
    .describe('binded', 'Do not try to load authbind')
    .describe('config', 'Path to yaml or json config files')
    .describe('certs', 'Path to ssl certificates: server.crt, server.key, ca.crt')
    .epilog('For more information see https://github.com/zerkalica/hapi-bouncer')

const args = argsBuilder.argv

if (!args.config || !args.config.length) {
    argsBuilder.showHelp()
    process.exit(0)
    return
}

// console.log(args)

if (args.verbose) {
    process.env.DEBUG = 'hapi-bouncer:*'
}

if (args.binded || os.type() === 'Windows_NT') {
    require('../dist/bouncerServer.js')
        .default(args)
        .catch((e) => {
            console.error(e.message, e.stack)
            process.exit(1)
        })
    return
}

var spawnArgs = ['--deep', __filename, '--binded'].concat(process.argv.slice(2))

var child = spawn('authbind', spawnArgs)

child.on('error', (err) => {
    console.error('For Linux and MacOS need install authbind to access 80 and 443 ports:\n' +
        'sudo apt-get install authbind\n' +
        'sudo touch /etc/authbind/byport/80 /etc/authbind/byport/443\n' +
        'sudo chown $USER /etc/authbind/byport/80 /etc/authbind/byport/443\n' +
        'sudo chmod 755 /etc/authbind/byport/80 /etc/authbind/byport/443\n'
    , '\n', err)
})

child.stdout.on('data', (data) => console.log(data.toString()))
child.stderr.on('data', (data) => console.error(data.toString()))
